// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package migrate

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./sql", "20180103142001_initial_schema.sql", "\"\"")
	packr.PackJSONBytes("./sql", "20180805174141-tournaments.sql", "\"LyoKICogQ29weXJpZ2h0IDIwMTggVGhlIE5ha2FtYSBBdXRob3JzCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICovCgotLSBOT1RFOiBUaGlzIG1pZ3JhdGlvbiBtYW51YWxseSBjb21taXRzIGluIHNlcGFyYXRlIHRyYW5zYWN0aW9ucyB0byBlbnN1cmUKLS0gdGhlIHNjaGVtYSB1cGRhdGVzIGFyZSBzZXF1ZW5jZWQgYmVjYXVzZSBjb2Nrcm9hY2hkYiBkb2VzIG5vdCBzdXBwb3J0Ci0tIGFkZGluZyBDSEVDSyBjb25zdHJhaW50cyB2aWEgIkFMVEVSIFRBQkxFIC4uLiBBREQgQ09MVU1OIiBzdGF0ZW1lbnRzLgoKLS0gK21pZ3JhdGUgVXAgbm90cmFuc2FjdGlvbgpCRUdJTjsKQUxURVIgVEFCTEUgbGVhZGVyYm9hcmQKICBBREQgQ09MVU1OIGNhdGVnb3J5ICAgICAgU01BTExJTlQgICAgIERFRkFVTFQgMCAvKkNIRUNLIChjYXRlZ29yeSA+PSAwKSovIE5PVCBOVUxMLAogIEFERCBDT0xVTU4gZGVzY3JpcHRpb24gICBWQVJDSEFSKDI1NSkgREVGQVVMVCAnJyBOT1QgTlVMTCwKICBBREQgQ09MVU1OIGR1cmF0aW9uICAgICAgSU5UICAgICAgICAgIERFRkFVTFQgODY0MDAgLypDSEVDSyAoZHVyYXRpb24gPiAwKSovIE5PVCBOVUxMLCAtLSBpbiBzZWNvbmRzLgogIEFERCBDT0xVTU4gZW5kX3RpbWUgICAgICBUSU1FU1RBTVBUWiwKICBBREQgQ09MVU1OIGpvaW5fcmVxdWlyZWQgQk9PTEVBTiAgICAgIERFRkFVTFQgRkFMU0UgTk9UIE5VTEwsCiAgQUREIENPTFVNTiBtYXhfc2l6ZSAgICAgIElOVCAgICAgICAgICBERUZBVUxUIDEwMDAwMDAwMCAvKkNIRUNLIChtYXhfc2l6ZSA+IDApKi8gTk9UIE5VTEwsCiAgQUREIENPTFVNTiBtYXhfbnVtX3Njb3JlIElOVCAgICAgICAgICBERUZBVUxUIDEwMDAwMDAgLypDSEVDSyAobWF4X251bV9zY29yZSA+IDApKi8gTk9UIE5VTEwsIC0tIG1heCBhbGxvd2VkIHNjb3JlIGF0dGVtcHRzLgogIEFERCBDT0xVTU4gdGl0bGUgICAgICAgICBWQVJDSEFSKDI1NSkgREVGQVVMVCAnJyBOT1QgTlVMTCwKICBBREQgQ09MVU1OIHNpemUgICAgICAgICAgSU5UICAgICAgICAgIERFRkFVTFQgMCBOT1QgTlVMTCwKICBBREQgQ09MVU1OIHN0YXJ0X3RpbWUgICAgVElNRVNUQU1QVFo7CgpBTFRFUiBUQUJMRSBsZWFkZXJib2FyZF9yZWNvcmQKICBBREQgQ09MVU1OIG1heF9udW1fc2NvcmUgSU5UIERFRkFVTFQgMTAwMDAwMCAvKkNIRUNLIChtYXhfbnVtX3Njb3JlID4gMCkqLyBOT1QgTlVMTDsKQ09NTUlUOwoKQkVHSU47CkFMVEVSIFRBQkxFIGxlYWRlcmJvYXJkCiAgQUREIENPTlNUUkFJTlQgY2hlY2tfY2F0ZWdvcnkgQ0hFQ0sgKGNhdGVnb3J5ID49IDApLAogIEFERCBDT05TVFJBSU5UIGNoZWNrX2R1cmF0aW9uIENIRUNLIChkdXJhdGlvbiA+IDApLAogIEFERCBDT05TVFJBSU5UIGNoZWNrX21heF9zaXplIENIRUNLIChtYXhfc2l6ZSA+IDApLAogIEFERCBDT05TVFJBSU5UIGNoZWNrX21heF9udW1fc2NvcmUgQ0hFQ0sgKG1heF9udW1fc2NvcmUgPiAwKSwKICBWQUxJREFURSBDT05TVFJBSU5UIGNoZWNrX2NhdGVnb3J5LAogIFZBTElEQVRFIENPTlNUUkFJTlQgY2hlY2tfZHVyYXRpb24sCiAgVkFMSURBVEUgQ09OU1RSQUlOVCBjaGVja19tYXhfc2l6ZSwKICBWQUxJREFURSBDT05TVFJBSU5UIGNoZWNrX21heF9udW1fc2NvcmU7CgpBTFRFUiBUQUJMRSBsZWFkZXJib2FyZF9yZWNvcmQKICBBREQgQ09OU1RSQUlOVCBjaGVja19tYXhfbnVtX3Njb3JlIENIRUNLIChtYXhfbnVtX3Njb3JlID4gMCksCiAgVkFMSURBVEUgQ09OU1RSQUlOVCBjaGVja19tYXhfbnVtX3Njb3JlOwpDT01NSVQ7CgotLSArbWlncmF0ZSBEb3duCkFMVEVSIFRBQkxFIElGIEVYSVNUUyBsZWFkZXJib2FyZAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBjYXRlZ29yeSwKICBEUk9QIENPTFVNTiBJRiBFWElTVFMgZGVzY3JpcHRpb24sCiAgRFJPUCBDT0xVTU4gSUYgRVhJU1RTIGR1cmF0aW9uLAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBlbmRfdGltZSwKICBEUk9QIENPTFVNTiBJRiBFWElTVFMgam9pbl9yZXF1aXJlZCwKICBEUk9QIENPTFVNTiBJRiBFWElTVFMgbWF4X3NpemUsCiAgRFJPUCBDT0xVTU4gSUYgRVhJU1RTIG1heF9udW1fc2NvcmUsCiAgRFJPUCBDT0xVTU4gSUYgRVhJU1RTIHRpdGxlLAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBzaXplLAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBzdGFydF90aW1lOwoKQUxURVIgVEFCTEUgSUYgRVhJU1RTIGxlYWRlcmJvYXJkX3JlY29yZAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBtYXhfbnVtX3Njb3JlOwo=\"")
}
